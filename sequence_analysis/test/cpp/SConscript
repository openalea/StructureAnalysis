# -*-python-*-

import os

# Import global objects

Import("env")
Import("seqlib")

#env_test = env.Clone()
env_test = env

pj = os.path.join


if env_test['debug']:
    env_test.Append(CPPDEFINES= ['DEBUG'])
    env_test.Append(CPPDEFINES= ['DEBUG'])
    if '-DNDEBUG' in env._dict['CCFLAGS']:
        env_test._dict['CCFLAGS'] = []
    if '-DNDEBUG' in env._dict['CXXFLAGS']:
        env_test._dict['CXXFLAGS'] = []

if env_test['with_efence']:
    env_test.AppendUnique(LIBS=['efence'])


# env_test.AppendUnique(LIBS=['stat_tool', 'sequence_analysis'])
env_test.AppendUnique(LIBS=['vpstat_tool', 'vpsequence'])
# env_test.AppendUnique(LIBPATH=['machin'])
# ajouterait : -Lbuild-scons/test/cpp/machin

#if os.name != 'nt':
#    env_test.AppendUnique(LIBS= ['efence'])

# env_test.AppendUnique(LIBS= ['leaktrace'])
#env.AppendUnique(CPPDEFINES=['MESSAGE'])

#LIBS = ['vpstat_tool', 'vpsequence']
#env_test.AppendUnique(LIBS=LIBS)

includes= env_test.ALEAGlob('*.h')
includes += env_test.ALEAGlob('*.hpp')
sources = env_test.ALEAGlob('*.cpp')

env_test.Append(CPPPATH='#/src/cpp/')
# Perhaps here you mean to modify CPPPATH?

#Sources

# test_int_fl_containers.cpp
#tests = Split("""
#test_sm_switching_lm.cpp
#""")

tests = Split("""
test_sequences.cpp
""")
# tests.append(seqlib)

def prog(p):
  return env_test.ALEAProgram(p)

# def check(p):
#    os.popen(p+" > output_current_test.txt")
#    res=commands.getoutput("diff output_current_test.txt Outputs/output_"+p+".txt")
#    if res!='':
#       print "actual and theoretical outputs differ for ", p, ": \n", res, "\n"
#    else:
#       print "actual and theoretical outputs match for ", p, "\n"


# Bug: AttributeError : 'map' object has no attribute 'get_csig'
# test_prog=map(prog, tests)
test_prog=env_test.ALEAProgram('test_sequence_analysis', tests)

'''
def rmTests(target, source, env):
  import os
  print [ os.remove(str(s)) for s in source]
  return 1

r= env.AddPostAction(test_prog, rmTests)
Alias('clean_test', r)
'''

# print test_prog

# map(check, test_prog)

Alias('test_sequence_analysis', test_prog)
Alias('test', 'test_sequence_analysis')


# -*-python-*-

import os, commands

# Import global objects

Import("env")

env_test = env.Copy()

pj = os.path.join

if env_test['debug']:
   env_test.Append(CPPDEFINES= ['DEBUG'])
env_test.AppendUnique(LIBS=['vptool', 'vpstat_tool'])
if env_test['with_efence']:
    env_test.AppendUnique(LIBS= ['efence'])

tests= Split("""
    test_multivariate_mixture.cpp
""")

def prog(p):
  return env_test.Program(p)

# def check(p):
#    os.popen(p+" > output_current_test.txt")
#    res=commands.getoutput("diff output_current_test.txt Outputs/output_"+p+".txt")
#    if res!='':
#       print "actual and theoretical outputs differ for ", p, ": \n", res, "\n"
#    else:
#       print "actual and theoretical outputs match for ", p, "\n"


test_prog=map(prog, tests)

"""
def rmTests(target, source, env):
  import os
  print [ os.remove(str(s)) for s in source]
  return 1

r= env.AddPostAction(test_prog, rmTests)
Alias('clean_test',r)
"""

# print test_prog

# map(check, test_prog)

Alias('test_stat_tool', test_prog)
Alias('test', 'test_stat_tool')

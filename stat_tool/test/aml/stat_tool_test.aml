EchoOn()

#########################################################################
#
#  discrete distributions, comparison of frequency distributions
#
#  beech, Wild cherry tree: number of nodes per growth unit (GU)
#
#  meri1.his: order 1,
#  meri1.his: order 2,
#  meri1.his: order 3, GU 1,
#  meri1.his: order 3, GU 2,
#  meri5.his: short shoots.
#
#########################################################################

dist0 = Distribution("NEGATIVE_BINOMIAL", 0, 1, 0.3)
dist0 = Distribution("Model/Distribution/distribution1.dist")

dist1 = Distribution("B", 0, 10, 0.3)
dist1 = Distribution("NB", 0, 3.5, 0.3)

# computation of survivior function and hasard rate

# Display(dist1, ViewPoint->"Survival")
# Plot(dist1, ViewPoint->"Survival")

# simulation/estimation

histo1 = Simulate(dist1, 200)

# Display(histo1, ViewPoint->"Survival")
# Plot(histo1, ViewPoint->"Survival")

# "B" "BINOMIAL", "P" "POISSON", "NB" "NEGATIVE_BINOMIAL"
# InfBoundStatus->"Free" (default) / "Fixed"
# MinInfBound->0 (default) / 1

dist2 = Estimate(histo1, "NB", MinInfBound->0, InfBoundStatus->"Fixed")

fagus = FrequencyDistribution("Sample/FrequencyDistribution/fagus1.his")

# transformation of frequency distributions, extraction/filter

histo2 = Cluster(fagus, "Step", 2)
histo3 = Cluster(fagus, "Information", 0.8)
histo4 = Cluster(fagus, "Limit", [2, 4, 6, 8, 10])
histo5 = Transcode(fagus, [1, 2, 2, 3, 3, 4, 4, 5])
# Display(histo5, Detail->2)

histo7 = Shift(fagus, -2)

histo8 = ValueSelect(fagus, 2, 8)

dist3 = Estimate(fagus, "B")

# comparison of frequency distributions

meri1 = FrequencyDistribution("Sample/FrequencyDistribution/meri1.his")
meri2 = FrequencyDistribution("Sample/FrequencyDistribution/meri2.his")
meri3 = FrequencyDistribution("Sample/FrequencyDistribution/meri3.his")
meri4 = FrequencyDistribution("Sample/FrequencyDistribution/meri4.his")
meri5 = FrequencyDistribution("Sample/FrequencyDistribution/meri5.his")

# Compare(meri1, meri2, meri3, meri4, meri5, "N", FileName->"ASCII/meri.cmp")
Compare(meri1, meri2, meri3, meri4, meri5, "O")

ComparisonTest("F", meri1, meri2)
ComparisonTest("T", meri1, meri2)
ComparisonTest("W", meri1, meri2)

# fit of a known distribution to a frequency distribution

dist5 = Fit(meri5, Distribution("B", 0, 10, 0.437879))
# Display(dist5, Detail->2)
# Plot(dist5)


#########################################################################
#
#  finite mixture of discrete distributions
#
#########################################################################

mixt1 = Mixture("Model/Distribution/mixture1.mixt")
mixt1 = Mixture(0.6, Distribution("B", 2, 18, 0.5), 0.4, Distribution("NB", 10, 10, 0.5))

mixt_histo1 = Simulate(mixt1, 200)

# extraction of frequency distributions corresponding to a given mixture component
# (i.e. elementary distributions which are combined by mixture)

histo10 = ExtractFrequencyDistribution(mixt_histo1, "Component", 1)
histo11 = ExtractFrequencyDistribution(mixt_histo1, "Component", 2)
histo12 = Merge(histo10, histo11)
histo13 = ExtractFrequencyDistribution(mixt_histo1, "Weight")

# estimation

mixt2 = Estimate(mixt_histo1, "MIXTURE", "B", "NB", MinInfBound->0, InfBoundStatus->"Fixed", DistInfBoundStatus->"Fixed")

mixt_histo2 = ExtractData(mixt2)

histo14 = ExtractFrequencyDistribution(ExtractData(mixt2), "Component", 1)
histo15 = ToFrequencyDistribution(ExtractDistribution(mixt2, "Component", 1))

# estimation and selection of the number of components

mixt3 = Estimate(meri1, "MIXTURE", Distribution("B", 6, 7, 0.5), "B")

# NbComponent->"Fixed" (default) / "Estimated"
# Penalty->"AIC"/ "AICc" / "BIC" / "BICc" (default), option valide si NbComponent->"Estimated"
 
meri = Merge(meri1, meri2, meri3, meri4, meri5)

mixt2 = Estimate(meri, "MIXTURE", "B", "B", "B", "B",  NbComponent->"Estimated", Penalty->"BIC")
# Display(mixt2, Detail->2)
dist_mixt = ExtractDistribution(mixt2, "Mixture")
# Plot(dist_mixt)


#########################################################################
#
#  convolution of discrete distributions
#
#########################################################################

convol1 = Convolution(Distribution("B", 0, 10, 0.5), Distribution("NB", 0, 10, 0.5))
convol1 = Convolution("Model/Distribution/convolution1.conv")

convol_histo1 = Simulate(convol1, 200)

histo20 = ExtractFrequencyDistribution(convol_histo1, "Elementary", 1)

convol2 = Estimate(convol_histo1, "CONVOLUTION", ExtractDistribution(convol1, "Elementary", 1), MinInfBound->0)

histo21 = ExtractFrequencyDistribution(ExtractData(convol2), "Elementary", 1)
histo22 = ToFrequencyDistribution(ExtractDistribution(convol2, "Elementary", 1))
# Plot(histo21, histo22)

histo_b2 = FrequencyDistribution("Sample/FrequencyDistribution/nothofagus_antarctica_bud_2.his")
histo_s2 = FrequencyDistribution("Sample/FrequencyDistribution/nothofagus_antarctica_shoot_2.his")

# Estimator->"Likelihood" (default) / "PenalizedLikelihood" / "Parametric"
# Si Estimator->"PenalizedLikelihood", options supplementaires possibles
# Penalty->"FirstDifference" / "SecondDifference" (default) / "Entropy", Weight,
# Outside->"Zero" (default) / "Continuation" (cf. stat_funs4.cpp).

# "C" or "CATEGORICAL" (for estimation only)

convol30 = Estimate(Shift(histo_s2, 1), "CONVOLUTION", Estimate(histo_b2, "CATEGORICAL"), NbIteration->500)
convol31 = Estimate(Shift(histo_s2, 1), "CONVOLUTION", Estimate(histo_b2, "CATEGORICAL"), NbIteration->100, Estimator->"PenalizedLikelihood", Weight->0.5)
convol32 = Estimate(Shift(histo_s2, 1), "CONVOLUTION", Estimate(histo_b2, "CATEGORICAL"), Estimator->"Parametric")

# Plot(convol30, convol31, convol32)

# Display(convol31)
# Plot(convol31)
# Plot(ExtractDistribution(convol31, "Convolution"))
# Save(convol31, "Spreadsheet/nothofagus_antartica_2.xld", Format->"SpreadSheet")


#########################################################################
#
#  compound distribution: not publicly distributed in the Python version
#
#########################################################################

cdist1 = Compound("Model/Distribution/compound1.cd")

chisto1 = Simulate(cdist1, 200)

histo30 = ExtractFrequencyDistribution(chisto1, "Sum")

cdist2 = Estimate(chisto1, "COMPOUND", ExtractDistribution(cdist1, "Elementary"), "Sum", MinInfBound->0)
# Plot(cdist2)

histo31 = ExtractFrequencyDistribution(ExtractData(cdist2), "Sum")
histo32 = ToFrequencyDistribution(ExtractDistribution(cdist2, "Sum"))
# Plot(histo31, histo32)

peup1 = FrequencyDistribution("Sample/FrequencyDistribution/peup1.his")
mixt4 = Estimate(peup1, "MIXTURE", "B", "NB")
histo33 = ToFrequencyDistributiony(ExtractDistribution(mixt4, "Component", 2))
histo34 = Shift(histo33, -11)

cdist30 = Estimate(histo34, "COMPOUND", Distribution("B", 0, 1, 0.7), "Sum")
# cdist30 = Estimate(histo34, "COMPOUND", Distribution("B", 0, 1, 0.7), "Sum", MinInfBound->0)
cdist31 = Estimate(histo34, "COMPOUND", Distribution("B", 0, 1, 0.7), "Sum", Estimator->"PenalizedLikelihood", Weight->0.5)
cdist32 = Estimate(histo34, "COMPOUND", Distribution("B", 0, 1, 0.7), "Sum", Estimator->"Parametric")

# Plot(cdist30, cdist31, cdist32)



#########################################################################
#
#  vectors : contingency table, one-way variance analysis,
#  linear regression or nonparametric regression (loess smoother)
#  multivariate mixture
#
#  Oak trunk annual shoots
#
#  INDEX_PARAMETER : TIME  (year of growth - 1995, 1996, 1997)
#
#  VARIABLE 1 : length of the annual shoot (cm)
#  VARIABLE 2 : diameter of the annual shoot (1/10 de mm)
#  VARIABLE 3 : number of cycles
#  VARIABLE 4 : number of nodes
#  VARIABLE 5 : number de branches
#
#########################################################################


seq0 = Sequences("Sample/Sequences/chene_sessile_15pa.seq")
# Plot(seq0, ViewPoint->"Data")

# change of unit for the variable diameter of the annual shoot

marginal2 = ExtractFrequencyDistribution(seq0, "Value", 2)
# Plot(Cluster(marginal2, "Information", 0.75))
# Plot(Cluster(marginal2, "Information", 0.61))
# Plot(Cluster(marginal2, "Step", 10))

vec10 = Vectors(seq0)

# plot of the pointwise averages
# Plot(Regression(vec10, "MovingAverage", 1, 2, [1]))

vec95 = ValueSelect(vec10, 1, 1995)
vec96 = ValueSelect(vec10, 1, 1996)
vec97 = ValueSelect(vec10, 1, 1997)

VarianceAnalysis(vec10, 1, 2, "N")
Compare(ExtractFrequencyDistribution(vec95, 2), ExtractFrequencyDistribution(vec96, 2), ExtractFrequencyDistribution(vec97, 2), "N")
# Plot(ExtractFrequencyDistribution(vec95, 2), ExtractFrequencyDistribution(vec96, 2), ExtractFrequencyDistribution(vec97, 2))

ContingencyTable(vec10, 1, 4)

# one-way variance analysis based on ranks

VarianceAnalysis(vec10, 1, 4, "O")
Compare(ExtractFrequencyDistribution(vec95, 4), ExtractFrequencyDistribution(vec96, 4), ExtractFrequencyDistribution(vec97, 4), "O")
# Plot(ExtractFrequencyDistribution(vec95, 4), ExtractFrequencyDistribution(vec96, 4), ExtractFrequencyDistribution(vec97, 4))

# Plot(ExtractFrequencyDistribution(vec95, 5), ExtractFrequencyDistribution(vec96, 5), ExtractFrequencyDistribution(vec97, 5))
# Plot(ExtractFrequencyDistribution(vec95, 6), ExtractFrequencyDistribution(vec96, 6), ExtractFrequencyDistribution(vec97, 6))

vec11 = ValueSelect(vec10, 4, 1)
vec12 = ValueSelect(vec10, 4, 2)
vec13 = ValueSelect(vec10, 4, 3, 4)

# Plot(ExtractFrequencyDistribution(vec11, 2), ExtractFrequencyDistribution(vec12, 2), ExtractFrequencyDistribution(vec13, 2))
# Plot(ExtractFrequencyDistribution(vec11, 5), ExtractFrequencyDistribution(vec12, 5), ExtractFrequencyDistribution(vec13, 5))

mixt20 = Estimate(ExtractFrequencyDistribution(vec10, 2), "MIXTURE", "NB", "NB", "NB", "NB", NbComponent->"Estimated")
# Display(mixt20)
# Plot(mixt20)
# Plot(ExtractDistribution(mixt20, "Mixture"))

mixt21 = Estimate(ExtractFrequencyDistribution(vec10, 5), "MIXTURE", "NB", "NB", "NB", "NB", NbComponent->"Estimated")

vec9596 = ValueSelect(vec10, 1, 1995, 1996)
# Plot(ExtractFrequencyDistribution(ValueSelect(vec9596, 4, 1), 6), ExtractFrequencyDistribution(ValueSelect(vec9596, 4, 2), 6), ExtractFrequencyDistribution(ValueSelect(vec9596, 4, 3, 4), 6))

# linear regression

regress10 = Regression(vec10, "Linear", 5, 2)
# Display(regress10)
# Plot(regress10)

# nonparametric regression (loess smoother)

regress11 = Regression(vec10, "NearestNeighbors",  5, 2, 0.3)

regress12 = Regression(vec9596, "Linear", 5, 6)
regress13 = Regression(vec9596, "NearestNeighbors", 5, 6, 0.5)

vec15 = SelectVariable(vec10, [1, 3, 6], Mode->"Reject")



#########################################################################
#
#  Distance matrix and clustering (partitioning or hierarchical methods) 
#
#########################################################################

# computation of a distance matrix using a standardization procedure

matrix10 = Compare(vec15, VectorDistance("N", "N", "N"))

# clustering using a partitioning method

# Display(Clustering(matrix10, "Partition", 2))

vec151 = SelectIndividual(vec10,  [69, 48, 41, 44, 32, 47, 81, 95, 11, 36, 75, 108, 56, 83, 38, 98, 113, 134, 110, 101, 77, 35, 74, 80, 50, 24, 89, 128, 5, 45, 8, 116, 119, 132, 61, 78, 53, 29, 131, 65, 90, 96, 104, 20, 86, 66, 42, 68, 125, 14, 23, 54, 33, 26, 71, 129, 102, 51, 70, 111, 138, 19, 127, 62, 117, 137, 2, 28, 17])
vec152 = SelectIndividual(vec10, [100, 13, 133, 105, 72, 9, 93, 109, 30, 115, 63, 7, 55, 37, 15, 114, 106, 46, 73, 18, 3, 87, 58, 43, 60, 76, 52, 6, 39, 31, 12, 99, 121, 123, 22, 79, 94, 88, 21, 97, 25, 40, 57, 136, 67, 49, 10, 4, 120, 92, 27, 91, 64, 124, 16, 130, 84, 107, 126, 103, 122, 112, 59, 1, 82, 34, 135, 118, 85])
# Plot(ExtractFrequencyDistribution(vec151, 4), ExtractFrequencyDistribution(vec152, 4))

matrix11 = Compare(vec15, VectorDistance("N", "O", "N"))

Clustering(matrix10, "Hierarchy", Algorithm->"Agglomerative")
Clustering(matrix10, "Hierarchy", Algorithm->"Divisive")

vec16 = SelectVariable(vec9596, [1, 3], Mode->"Reject")
matrix12 = Compare(vec16, VectorDistance("N", "N", "N", "N"))
matrix13 = Compare(vec16, VectorDistance("N", "O", "N", "N"))


#########################################################################
#
#  Multivariate mixture :
#
#  arabidospisis shoot growth
#
#  INDEX_PARAMETER : TIME
#
#  VARIABLE 1 : INT   trichomes	 0: none; 1: abaxial face partially covered with trichomes;
#                                2: abaxial face fully covered with trichomes
#  VARIABLE 2 : REAL  l_w_ratio	length-to-width ratio of the blade, i.e. ratio of the distance from the blade:
#                     petiole junction to the distal leaf tip and the maximal width of the blade
#  VARIABLE 3 : REAL  area	 fully expanded leaf area (mm2)
#  VARIABLE 4 : REAL  maxLer	 maximal leaf expansion rate computed from sigmoidal fitting (mm2.day-1)
#  VARIABLE 5 : REAL  charactTime	duration time characteristic of the sigmoid curve estimated
#                     for the leaf expansion (days)
#
#  arabidospsis phyllotaxis
#
#  VARIABLE 1 : divergence angle
#
#########################################################################

seq10 = Sequences("Sample/Sequences/arabidopsis_shoot_growth_Col_0_filtered_2.seq")
SelectStep(seq10, 3, 5)
SelectStep(seq10, 5, 0.05)

vec10 = Vectors(RemoveIndexParameter(SelectVariable(seq10, [1, 3, 5])))
mixt1 = Mixture("Model/Mixture/arabidopsis_shoot_growth_trivariate_4.mixt")
mixt14 = Estimate(vec10, "MIXTURE", mixt1)
# Display(mixt14)
# Plot(mixt14, 1)

vec11 = Simulate(mixt14, 1000)
SelectStep(vec11, 3, 5)
SelectStep(vec11, 4, 0.05)
# Display(vec11)
# Plot(vec11, 2)
# Display(vec11, ViewPoint->"Data")


seq1 = Sequences("Sample/Sequences/angles_columbia_0.seq")
seq2 = Round(Sequences("Sample/Sequences/angles_columbia_1.seq"), Mode->"Floor")
seq3 = Round(Sequences("Sample/Sequences/angles_columbia_2.seq"), Mode->"Floor")
seq4 = Sequences("Sample/Sequences/angles_ahp6_10.seq")
seq5 = Round(Sequences("Sample/Sequences/angles_ahp6_11.seq"), Mode->"Floor")
seq6 = Round(Sequences("Sample/Sequences/angles_ahp6_12.seq"), Mode->"Floor")
seq7 = Sequences("Sample/Sequences/angles_columbia_truncated.seq")
seq8 = Sequences("Sample/Sequences/angles_ahp6_truncated.seq")

seq12 = VariableScaling(Cluster(Merge(seq1, seq2, seq3, seq7, seq4, seq5, seq6, seq8), "Step", 5, Mode->"Round"), 5)
vec12 = Vectors(seq12)

mixt1 = Mixture("Model/Mixture/arabidopsis_phyllotaxis_4.mixt")
mixt41 = Estimate(vec12, "MIXTURE", mixt1, CommonDispersion->False)
# Display(mixt41)
# Plot(mixt41, 1)

mixt1 = Mixture("Model/Mixture/arabidopsis_phyllotaxis_5.mixt")
mixt51 = Estimate(vec12, "MIXTURE", mixt1, CommonDispersion->False)
# Display(mixt51)
# Plot(mixt51, 1)
mixt52 = Estimate(vec12, "MIXTURE", mixt1, CommonDispersion->True)
# Display(mixt51)
# Plot(mixt51, 1)

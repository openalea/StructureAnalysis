#include "_stat_tool.h"


void wrapper_0cdd446515295e8e8373e99f328c3748()
{

    std::string name_0cdd446515295e8e8373e99f328c3748 = boost::python::extract< std::string >(boost::python::scope().attr("__name__") + ".stat_tool");
    boost::python::object module_0cdd446515295e8e8373e99f328c3748(boost::python::handle<  >(boost::python::borrowed(PyImport_AddModule(name_0cdd446515295e8e8373e99f328c3748.c_str()))));
    boost::python::scope().attr("stat_tool") = module_0cdd446515295e8e8373e99f328c3748;
    boost::python::scope scope_0cdd446515295e8e8373e99f328c3748 = module_0cdd446515295e8e8373e99f328c3748;
    boost::python::scope().attr("inverse_gaussian_tail") = ::stat_tool::INVERSE_GAUSSIAN_TAIL;
    boost::python::scope().attr("compound_threshold") = ::stat_tool::COMPOUND_THRESHOLD;
    boost::python::scope().attr("renewal_entropy_weight") = ::stat_tool::RENEWAL_ENTROPY_WEIGHT;
    boost::python::scope().attr("sample_nb_value_coeff") = ::stat_tool::SAMPLE_NB_VALUE_COEFF;
    boost::python::scope().attr("max_surface") = ::stat_tool::MAX_SURFACE;
    boost::python::scope().attr("min_nb_assignment") = ::stat_tool::MIN_NB_ASSIGNMENT;
    boost::python::scope().attr("bisection_ratio_threshold") = ::stat_tool::BISECTION_RATIO_THRESHOLD;
    boost::python::scope().attr("convolution_coeff") = ::stat_tool::CONVOLUTION_COEFF;
    boost::python::scope().attr("gamma_nb_sub_step") = ::stat_tool::GAMMA_NB_SUB_STEP;
    boost::python::scope().attr("gamma_max_nb_iteration") = ::stat_tool::GAMMA_MAX_NB_ITERATION;
    boost::python::scope().attr("distance_nb_vector") = ::stat_tool::DISTANCE_NB_VECTOR;
    boost::python::scope().attr("display_conditional_nb_value") = ::stat_tool::DISPLAY_CONDITIONAL_NB_VALUE;
    boost::python::scope().attr("gamma_inverse_sample_size_factor") = ::stat_tool::GAMMA_INVERSE_SAMPLE_SIZE_FACTOR;
    boost::python::scope().attr("contingency_nb_value") = ::stat_tool::CONTINGENCY_NB_VALUE;
    boost::python::scope().attr("max_diff_bound") = ::stat_tool::MAX_DIFF_BOUND;
    boost::python::scope().attr("histogram_frequency") = ::stat_tool::HISTOGRAM_FREQUENCY;
    boost::python::scope().attr("nb_category") = ::stat_tool::NB_CATEGORY;
    boost::python::scope().attr("poisson_range") = ::stat_tool::POISSON_RANGE;
    boost::python::scope().attr("observation_threshold") = ::stat_tool::OBSERVATION_THRESHOLD;
    boost::python::scope().attr("mixture_likelihood_diff") = ::stat_tool::MIXTURE_LIKELIHOOD_DIFF;
    boost::python::scope().attr("compound_nb_iter") = ::stat_tool::COMPOUND_NB_ITER;
    boost::python::scope().attr("gamma_zero_frequency_threshold") = ::stat_tool::GAMMA_ZERO_FREQUENCY_THRESHOLD;
    boost::python::scope().attr("gaussian_nb_step") = ::stat_tool::GAUSSIAN_NB_STEP;
    boost::python::scope().attr("distance_roundness") = ::stat_tool::DISTANCE_ROUNDNESS;
    boost::python::scope().attr("max_frequency") = ::stat_tool::MAX_FREQUENCY;
    boost::python::scope().attr("skewness_roundness") = ::stat_tool::SKEWNESS_ROUNDNESS;
    boost::python::scope().attr("bisection_nb_iter") = ::stat_tool::BISECTION_NB_ITER;
    boost::python::scope().attr("min_range") = ::stat_tool::MIN_RANGE;
    boost::python::scope().attr("mixture_nb_iter") = ::stat_tool::MIXTURE_NB_ITER;
    boost::python::scope().attr("nb_parameter") = ::stat_tool::NB_PARAMETER;
    boost::python::scope().attr("gaussian_tail") = ::stat_tool::GAUSSIAN_TAIL;
    boost::python::scope().attr("double_error") = ::stat_tool::DOUBLE_ERROR;
    boost::python::scope().attr("gamma_default_scale_parameter") = ::stat_tool::GAMMA_DEFAULT_SCALE_PARAMETER;
    boost::python::scope().attr("gamma_nb_step") = ::stat_tool::GAMMA_NB_STEP;
    boost::python::scope().attr("p_threshold") = ::stat_tool::P_THRESHOLD;
    boost::python::scope().attr("plot_nb_value") = ::stat_tool::PLOT_NB_VALUE;
    boost::python::scope().attr("discrete_mixture_nb_component") = ::stat_tool::DISCRETE_MIXTURE_NB_COMPONENT;
    boost::python::scope().attr("error_length") = ::stat_tool::ERROR_LENGTH;
    boost::python::scope().attr("nb_state") = ::stat_tool::NB_STATE;
    boost::python::scope().attr("neighborhood") = ::stat_tool::NEIGHBORHOOD;
    boost::python::scope().attr("nb_output_process") = ::stat_tool::NB_OUTPUT_PROCESS;
    boost::python::scope().attr("spreadsheet_roundness") = ::stat_tool::SPREADSHEET_ROUNDNESS;
    boost::python::scope().attr("continuous_positive_inf_bound") = ::stat_tool::CONTINUOUS_POSITIVE_INF_BOUND;
    boost::python::scope().attr("discrete_mixture_nb_iter") = ::stat_tool::DISCRETE_MIXTURE_NB_ITER;
    boost::python::scope().attr("ascii_space") = ::stat_tool::ASCII_SPACE;
    boost::python::scope().attr("ascii_roundness") = ::stat_tool::ASCII_ROUNDNESS;
    boost::python::scope().attr("convolution_init_probability") = ::stat_tool::CONVOLUTION_INIT_PROBABILITY;
    boost::python::scope().attr("mixture_nb_component") = ::stat_tool::MIXTURE_NB_COMPONENT;
    boost::python::scope().attr("nb_value_coeff") = ::stat_tool::NB_VALUE_COEFF;
    boost::python::scope().attr("gaussian_max_nb_decimal") = ::stat_tool::GAUSSIAN_MAX_NB_DECIMAL;
    boost::python::scope().attr("compound_likelihood_diff") = ::stat_tool::COMPOUND_LIKELIHOOD_DIFF;
    boost::python::scope().attr("min_nb_element") = ::stat_tool::MIN_NB_ELEMENT;
    boost::python::scope().attr("convolution_difference_weight") = ::stat_tool::CONVOLUTION_DIFFERENCE_WEIGHT;
    boost::python::scope().attr("nb_complete_interval") = ::stat_tool::NB_COMPLETE_INTERVAL;
    boost::python::scope().attr("compound_init_probability") = ::stat_tool::COMPOUND_INIT_PROBABILITY;
    boost::python::scope().attr("max_inf_bound") = ::stat_tool::MAX_INF_BOUND;
    boost::python::scope().attr("plot_roundness") = ::stat_tool::PLOT_ROUNDNESS;
    boost::python::scope().attr("nb_output") = ::stat_tool::NB_OUTPUT;
    boost::python::scope().attr("plot_range_ratio") = ::stat_tool::PLOT_RANGE_RATIO;
    boost::python::scope().attr("convolution_nb_iter") = ::stat_tool::CONVOLUTION_NB_ITER;
    boost::python::scope().attr("gamma_iteration_factor") = ::stat_tool::GAMMA_ITERATION_FACTOR;
    boost::python::scope().attr("discrete_mixture_coeff") = ::stat_tool::DISCRETE_MIXTURE_COEFF;
    boost::python::scope().attr("d_inf") = ::stat_tool::D_INF;
    boost::python::scope().attr("convolution_threshold") = ::stat_tool::CONVOLUTION_THRESHOLD;
    boost::python::scope().attr("tic_threshold") = ::stat_tool::TIC_THRESHOLD;
    boost::python::scope().attr("plot_nb_curve") = ::stat_tool::PLOT_NB_CURVE;
    boost::python::scope().attr("vector_nb_variable") = ::stat_tool::VECTOR_NB_VARIABLE;
    boost::python::scope().attr("min_probability") = ::stat_tool::MIN_PROBABILITY;
    boost::python::scope().attr("sup_norm_distance_nb_vector") = ::stat_tool::SUP_NORM_DISTANCE_NB_VECTOR;
    boost::python::scope().attr("ascii_nb_value") = ::stat_tool::ASCII_NB_VALUE;
    boost::python::scope().attr("renewal_likelihood_diff") = ::stat_tool::RENEWAL_LIKELIHOOD_DIFF;
    boost::python::scope().attr("renewal_nb_iter") = ::stat_tool::RENEWAL_NB_ITER;
    boost::python::scope().attr("mixture_nb_vector") = ::stat_tool::MIXTURE_NB_VECTOR;
    boost::python::scope().attr("b_threshold") = ::stat_tool::B_THRESHOLD;
    boost::python::scope().attr("nb_value") = ::stat_tool::NB_VALUE;
    boost::python::scope().attr("von_mises_nb_step") = ::stat_tool::VON_MISES_NB_STEP;
    boost::python::scope().attr("convolution_entropy_weight") = ::stat_tool::CONVOLUTION_ENTROPY_WEIGHT;
    boost::python::scope().attr("regression_nb_vector") = ::stat_tool::REGRESSION_NB_VECTOR;
    boost::python::scope().attr("gaussian_min_variation_coeff") = ::stat_tool::GAUSSIAN_MIN_VARIATION_COEFF;
    boost::python::scope().attr("min_weight_step") = ::stat_tool::MIN_WEIGHT_STEP;
    boost::python::scope().attr("sample_nb_value") = ::stat_tool::SAMPLE_NB_VALUE;
    boost::python::scope().attr("i_default") = ::stat_tool::I_DEFAULT;
    boost::python::scope().attr("nb_assignment_parameter") = ::stat_tool::NB_ASSIGNMENT_PARAMETER;
    boost::python::scope().attr("gamma_min_shape_parameter") = ::stat_tool::GAMMA_MIN_SHAPE_PARAMETER;
    boost::python::scope().attr("plot_max_shift") = ::stat_tool::PLOT_MAX_SHIFT;
    boost::python::scope().attr("plot_shift") = ::stat_tool::PLOT_SHIFT;
    boost::python::scope().attr("degree_decimal_scale") = ::stat_tool::DEGREE_DECIMAL_SCALE;
    boost::python::scope().attr("von_mises_nb_sub_step") = ::stat_tool::VON_MISES_NB_SUB_STEP;
    boost::python::scope().attr("inverse_gaussian_nb_step") = ::stat_tool::INVERSE_GAUSSIAN_NB_STEP;
    boost::python::scope().attr("plot_nb_distribution") = ::stat_tool::PLOT_NB_DISTRIBUTION;
    boost::python::scope().attr("radian_decimal_scale") = ::stat_tool::RADIAN_DECIMAL_SCALE;
    boost::python::scope().attr("noise_probability") = ::stat_tool::NOISE_PROBABILITY;
    boost::python::scope().attr("inverse_gaussian_nb_sub_step") = ::stat_tool::INVERSE_GAUSSIAN_NB_SUB_STEP;
    boost::python::scope().attr("global_nb_iter") = ::stat_tool::GLOBAL_NB_ITER;
    boost::python::scope().attr("discrete_mixture_likelihood_diff") = ::stat_tool::DISCRETE_MIXTURE_LIKELIHOOD_DIFF;
    boost::python::scope().attr("cumul_threshold") = ::stat_tool::CUMUL_THRESHOLD;
    boost::python::scope().attr("variance_analysis_nb_value") = ::stat_tool::VARIANCE_ANALYSIS_NB_VALUE;
    boost::python::scope().attr("accessibility_length") = ::stat_tool::ACCESSIBILITY_LENGTH;
    boost::python::scope().attr("nb_threshold") = ::stat_tool::NB_THRESHOLD;
    boost::python::scope().attr("gamma_max_nb_decimal") = ::stat_tool::GAMMA_MAX_NB_DECIMAL;
    boost::python::scope().attr("inf_bound_margin") = ::stat_tool::INF_BOUND_MARGIN;
    boost::python::scope().attr("gaussian_nb_sub_step") = ::stat_tool::GAUSSIAN_NB_SUB_STEP;
    boost::python::scope().attr("marginal_distribution_max_value") = ::stat_tool::MARGINAL_DISTRIBUTION_MAX_VALUE;
    boost::python::scope().attr("gamma_shape_parameter_threshold") = ::stat_tool::GAMMA_SHAPE_PARAMETER_THRESHOLD;
    boost::python::scope().attr("plot_ymargin") = ::stat_tool::PLOT_YMARGIN;
    boost::python::scope().attr("compound_difference_weight") = ::stat_tool::COMPOUND_DIFFERENCE_WEIGHT;
    boost::python::scope().attr("max_weight_step") = ::stat_tool::MAX_WEIGHT_STEP;
    boost::python::scope().attr("renewal_difference_weight") = ::stat_tool::RENEWAL_DIFFERENCE_WEIGHT;
    boost::python::scope().attr("display_contingency_nb_value") = ::stat_tool::DISPLAY_CONTINGENCY_NB_VALUE;
    boost::python::scope().attr("ascii_nb_individual") = ::stat_tool::ASCII_NB_INDIVIDUAL;
    boost::python::scope().attr("b_probability") = ::stat_tool::B_PROBABILITY;
    boost::python::scope().attr("d_default") = ::stat_tool::D_DEFAULT;
    boost::python::scope().attr("negative_binomial_parameter") = ::stat_tool::NEGATIVE_BINOMIAL_PARAMETER;
    boost::python::scope().attr("chi2_frequency") = ::stat_tool::CHI2_FREQUENCY;
    boost::python::scope().attr("posterior_probability_nb_vector") = ::stat_tool::POSTERIOR_PROBABILITY_NB_VECTOR;
    boost::python::scope().attr("observation_coeff") = ::stat_tool::OBSERVATION_COEFF;
    boost::python::scope().attr("sup_bound_margin") = ::stat_tool::SUP_BOUND_MARGIN;
    boost::python::scope().attr("poisson_ratio") = ::stat_tool::POISSON_RATIO;
    boost::python::scope().attr("plot_min_frequency") = ::stat_tool::PLOT_MIN_FREQUENCY;
    boost::python::scope().attr("plot_nb_histogram") = ::stat_tool::PLOT_NB_HISTOGRAM;
    boost::python::scope().attr("partitioning_nb_iter_2") = ::stat_tool::PARTITIONING_NB_ITER_2;
    boost::python::scope().attr("partitioning_nb_iter_1") = ::stat_tool::PARTITIONING_NB_ITER_1;
    boost::python::scope().attr("yscale") = ::stat_tool::YSCALE;
    boost::python::scope().attr("thresholding_factor") = ::stat_tool::THRESHOLDING_FACTOR;
    boost::python::scope().attr("convolution_nb_distribution") = ::stat_tool::CONVOLUTION_NB_DISTRIBUTION;
    boost::python::scope().attr("compound_coeff") = ::stat_tool::COMPOUND_COEFF;
    boost::python::scope().attr("plot_mass_threshold") = ::stat_tool::PLOT_MASS_THRESHOLD;
    boost::python::scope().attr("mean_shift_coeff") = ::stat_tool::MEAN_SHIFT_COEFF;
    boost::python::scope().attr("order") = ::stat_tool::ORDER;
    boost::python::scope().attr("gamma_tail") = ::stat_tool::GAMMA_TAIL;
    boost::python::scope().attr("nb_critical_probability") = ::stat_tool::NB_CRITICAL_PROBABILITY;
    boost::python::scope().attr("max_range") = ::stat_tool::MAX_RANGE;
    boost::python::scope().attr("max_nb_assignment") = ::stat_tool::MAX_NB_ASSIGNMENT;
    boost::python::scope().attr("accessibility_threshold") = ::stat_tool::ACCESSIBILITY_THRESHOLD;
    boost::python::scope().attr("max_value_coeff") = ::stat_tool::MAX_VALUE_COEFF;
    boost::python::scope().attr("convolution_likelihood_diff") = ::stat_tool::CONVOLUTION_LIKELIHOOD_DIFF;
    boost::python::scope().attr("inverse_gaussian_max_nb_decimal") = ::stat_tool::INVERSE_GAUSSIAN_MAX_NB_DECIMAL;
    boost::python::scope().attr("gamma_frequency_threshold") = ::stat_tool::GAMMA_FREQUENCY_THRESHOLD;
    boost::python::scope().attr("max_mean") = ::stat_tool::MAX_MEAN;
    boost::python::scope().attr("compound_entropy_weight") = ::stat_tool::COMPOUND_ENTROPY_WEIGHT;
    boost::python::scope().attr("nb_error") = ::stat_tool::NB_ERROR;
    boost::python::scope().attr("display_nb_individual") = ::stat_tool::DISPLAY_NB_INDIVIDUAL;
    boost::python::scope().attr("dist_nb_element") = ::stat_tool::DIST_NB_ELEMENT;
    boost::python::scope().attr("line_nb_character") = ::stat_tool::LINE_NB_CHARACTER;
}
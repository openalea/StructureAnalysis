"""Classes shared by most statistical modules"""


#import cstat_tool, os

#DistributionIdentifier=cstat_tool.DistributionIdentifier
#VariableType=cstat_tool.VariableType
#Parametric=cstat_tool._Parametric
#Distribution=cstat_tool.Distribution
#D_DEFAULT=cstat_tool.D_DEFAULT()
#I_DEFAULT=cstat_tool.I_DEFAULT()
#SELF_TRANSITION=cstat_tool.SELF_TRANSITION()
#RestorationAlgorithm=cstat_tool.RestorationAlgorithm

class _PlotManager:
    """Manage the graphical outputs using Gnuplot.py."""
    def __init__(self, file_list, ref_prefix, nb_windows=1):
        """Initialize a PlotManager.
        
        Argument file_list refers to the entire set of files generated by
        the Plot command, ref_prefix to the prefix of the particular file 
        to be drawn and nb_windows to the number of graphs for that file."""
        import Gnuplot, sys, os
        # print file_list
        g=Gnuplot.Gnuplot()
        self.__plot=g
        cfile=open(ref_prefix+'.plot','r')
        c_commands=cfile.readlines()
        cfile.close()
        py_commands= []
        l=[]
        # extract the successive commands
        for c in c_commands:
            if 'pause' in c:
                py_commands.append(l)
                l= []
                continue
            l.append(c)
        gcommands=[ "".join(c) for c in py_commands]
        cont=True
        if nb_windows==1:
            # one single frame to be printed
            prompt=''
        else:
            prompt='<Return>: continue, '
        prompt+='<p>: print, <s>: suspend, <q>: quit\n'
        frame=0
        sys.stderr.write(prompt)
        while cont:
            g(gcommands[frame])
            choice=sys.stdin.read(1)
            if choice=='q':
                cont=False
                self.__plot=None
            elif ((choice=='\n') and not(nb_windows==1)):
                frame+=1
                if frame==len(gcommands):
                    frame=0
            elif choice=='s':
                cont=False
            elif choice=='p':
                cont=False
                self.__plot=None
                cfile=open(ref_prefix+'.print','r')
                g=Gnuplot.Gnuplot()
                c_commands=cfile.read()
                cfile.close()
                # print c_commands
                c_commands=self.__replacestr(c_commands, 'postscript', 
                                             'postscript color')
                # similar replacement can be performed for the file name
                # seek for keyword "set output"
                strseek="SET OUTPUT"
                pos=c_commands.upper().find(strseek)
                if pos != -1:
                    endlpos=c_commands.find("\n",pos)
                    file_name=c_commands[pos+len(strseek):endlpos]
                    print("graph printed to" + str(file_name) + "\n")
                g(c_commands)
                del g
        for tmpfile in file_list:
            os.remove(os.getcwd()+'/'+tmpfile)

    def __replacestr(self, message, string, subst):
        # replace string by subst in message
        index=0
        while index < len(message):
            i=message.find(string, index)
            if (i==-1) or (i+len(string)+1 >= len(message)):
                # subchain string has not been found or this is the last word
                return message
            else:
                index=i+1
                message=message[0:i]+str(subst) \
                        +message[i+len(string):len(message)]
        return message

class FormatError(Exception):
    """Exceptions related to the statistical modules."""
    
    def __init__(self, error=None):
        """Initialize a FormatError exception.""" 
        if error is None:
            self.__error=""
        else:
            self.__error=error
            
    def _error(self):
        return str(self.__error)
            
    def __str__(self):
        return str(self.__error)        

class Histogram:
    """Histograms."""
    
    def __init__(self, histogram):
        """Initialize an Histogram by copy.""" 
        if issubclass(histogram.__class__, Histogram):
            # histogram is supposed to be a Histogram...
            self.__histo=cstat_tool.Histogram(histogram.__histo)
        elif issubclass(histogram.__class__, cstat_tool.Histogram):
            # ... or a cstat_tool.Histogram...
            self.__histo=cstat_tool.Histogram(histogram)
        elif issubclass(histogram.__class__, cstat_tool.Distribution):
            # ... or a cstat_tool.Distribution...
            self.__histo=cstat_tool.Histogram(histogram)
        else:
            # ... or a sample of int
            try:
                chisto=cstat_tool.Histogram(histogram)
            except RuntimeError as error:
                raise FormatError(error)
            else:
                self.__histo=chisto

    def Display(self, Detail=None, ViewPoint=None):
        """Display the Histogram using an ASCII output.
        
        Usage:  Display(ViewPoint="Survival")
                Display(Detail=2)"""
        if ViewPoint is None:
            # Display(Detail=2)
            if Detail is None:
                Detail=1
            if Detail==1:
                exhaustive=False
            elif Detail==2:
                exhaustive=True
            elif type(Detail)!=int:
                msg="Bad type for 'Detail' argument:"+str(type(Detail)) \
                +" - expecting type 'int'"
                raise TypeError(msg)
            else:
                msg="Bad value for 'Detail' argument:"+str(Detail) \
                +" - expecting 1 or 2"
                raise ValueError(msg)
            try:
                # s=cstat_tool.Histogram.display(self.__histo, exhaustive)
                s=self.__histo.display(exhaustive)
            except RuntimeError as f:
                raise FormatError(f)
            print(s)
        else:
            # Display(ViewPoint="Survival")
            if Detail is None:
                if type(ViewPoint)!=str:
                    msg="bad type for 'ViewPoint' argument:" + \
                        str(type(ViewPoint)) + " - expecting type 'str'"
                    raise TypeError(msg)
                elif ViewPoint.upper()!="SURVIVAL":
                    msg="Bad value for 'ViewPoint' argument:" + str(Detail) \
                    +" - expecting 'Survival'"
                    raise ValueError(msg)
                try:
                    s=self.__histo.display_survival()
                except RuntimeError as f:
                    raise FormatError(f)
                print(s)
            else:
                msg="Display must be used with either 'Detail' or with " + \
                    "'ViewPoint' parameter, not both"
                raise ValueError(msg)

    def Plot(self, ViewPoint=None, Title=""):
        """Graphical output of the Histogram using Gnuplot.py.
        
        Usage:  Plot(Title="Any Title")
                Plot(ViewPoint="Survival", Title="Any Title")"""
        if not(ViewPoint is None):
            if type(ViewPoint)!=str:
                msg="bad type for 'ViewPoint' argument:"+str(type(ViewPoint)) \
                +" - expecting type 'str'"
                raise TypeError(msg)
            elif ViewPoint.upper()!="SURVIVAL":
                msg="Bad value for 'ViewPoint' argument:"+str(Detail) \
                +" - expecting 'Survival'"
                raise ValueError(msg)
        import os
        prefix="ftmp"
        file_created=False
        # find a non existing file name
        while not file_created:
            try:
                cfile=open(prefix+'.plot','r')
            except IOError:
                # file does not exist
                # file_list= [prefix+extension for extension in \
                #            [".plot", "1.dat", "0.dat", ".print"]]
                file_created=True
            else:
                import random
                prefix+=str(random.randint(1,9))
        try:
            file_list=[]
            if ViewPoint is None:
                self.__histo.plot_write(os.getcwd()+'/'+prefix, Title)
            else:
                self.__histo.plot_write_survival(os.getcwd()+'/'+prefix, 
                                                 Title)
            # build the list of the files actually created: 
            for var in range(3):
                    filename=prefix+str(var)
                    try:
                        tmpfile=open(filename+'.dat', 'r')
                    except IOError:
                        pass
                    else:
                        tmpfile.close()
                        # add the .dat file
                        file_list+=[filename+'.dat']
            file_list+=[prefix+extension
                for extension in [".plot", ".print"]]
        except RuntimeError as f:
            for tmpfile in file_list:
                os.remove(os.getcwd()+'/'+tmpfile)
            raise FormatError(f)
        else:
            if ViewPoint==None:
                nb_windows=1
            else:
                nb_windows=3            
            self.__plot=_PlotManager(file_list, prefix, nb_windows)
            
    def Save(self, file_name, Format="ASCII", Detail=2):
        """Save the Histogram into a file, using "ASCII" or 
        "SPREADSHEET" format and a level of detail 1 or 2.
        
        Usage:  Save("my_filename.txt", Format="ASCII", Detail=2)
                Save("my_filename.txt", "Spreadsheet")"""
        if not (Format.upper()=="ASCII" 
                or Format.upper()=="SPREADSHEET"):
            msg="unknown file format: "+str(format)
            raise ValueError(msg)
##        elif not (ViewPoint.upper()=="DATA" 
##                or ViewPoint.upper()=="SURVIVAL"):
##            msg="unknown viewpoint: "+str(format)
##            raise ValueError, msg
        if Detail==1:
            exhaustive=False
        elif Detail==2:
            exhaustive=True
        elif type(Detail)==int:
            msg="invalid level of detail: "+str(Detail)
            raise ValueError(msg)
        else:
            msg="invalid type for detail: "+str(type(Detail))
            raise TypeError(msg)
        if Format.upper()=="ASCII":
            try:
                self.__histo.ascii_write(file_name, exhaustive)
            except RuntimeError as error:
                raise FormatError(error)
        else:
            try:
                self.__histo.spreadsheet_write(file_name)#, exhaustive)
            except RuntimeError as error:
                raise FormatError(error)

    def _chisto(self):
        return(self.__histo)
    
    def __str__(self):
        return str(self.__histo)
        
    
